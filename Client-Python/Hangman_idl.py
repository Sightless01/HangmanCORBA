# Python stubs generated by omniidl from ../Hangman.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "HangmanGame"
#
__name__ = "HangmanGame"
_0_HangmanGame = omniORB.openModule("HangmanGame", r"../Hangman.idl")
_0_HangmanGame__POA = omniORB.openModule("HangmanGame__POA", r"../Hangman.idl")


# interface Hangman
_0_HangmanGame._d_Hangman = (omniORB.tcInternal.tv_objref, "IDL:HangmanGame/Hangman:1.0", "Hangman")
omniORB.typeMapping["IDL:HangmanGame/Hangman:1.0"] = _0_HangmanGame._d_Hangman
_0_HangmanGame.Hangman = omniORB.newEmptyClass()
class Hangman :
    _NP_RepositoryId = _0_HangmanGame._d_Hangman[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_HangmanGame.Hangman = Hangman
_0_HangmanGame._tc_Hangman = omniORB.tcInternal.createTypeCode(_0_HangmanGame._d_Hangman)
omniORB.registerType(Hangman._NP_RepositoryId, _0_HangmanGame._d_Hangman, _0_HangmanGame._tc_Hangman)

# Hangman operations and attributes
Hangman._d_startGame = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
Hangman._d_getCurrentLife = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_long, ), None)
Hangman._d_letterGuess = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_char), (omniORB.tcInternal.tv_boolean, ), None)
Hangman._d_newGame = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
Hangman._d_endGame = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
Hangman._d_checkKey = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), (omniORB.tcInternal.tv_boolean, ), None)

# Hangman object reference
class _objref_Hangman (CORBA.Object):
    _NP_RepositoryId = Hangman._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def startGame(self, *args):
        return self._obj.invoke("startGame", _0_HangmanGame.Hangman._d_startGame, args)

    def getCurrentLife(self, *args):
        return self._obj.invoke("getCurrentLife", _0_HangmanGame.Hangman._d_getCurrentLife, args)

    def letterGuess(self, *args):
        return self._obj.invoke("letterGuess", _0_HangmanGame.Hangman._d_letterGuess, args)

    def newGame(self, *args):
        return self._obj.invoke("newGame", _0_HangmanGame.Hangman._d_newGame, args)

    def endGame(self, *args):
        return self._obj.invoke("endGame", _0_HangmanGame.Hangman._d_endGame, args)

    def checkKey(self, *args):
        return self._obj.invoke("checkKey", _0_HangmanGame.Hangman._d_checkKey, args)

omniORB.registerObjref(Hangman._NP_RepositoryId, _objref_Hangman)
_0_HangmanGame._objref_Hangman = _objref_Hangman
del Hangman, _objref_Hangman

# Hangman skeleton
__name__ = "HangmanGame__POA"
class Hangman (PortableServer.Servant):
    _NP_RepositoryId = _0_HangmanGame.Hangman._NP_RepositoryId


    _omni_op_d = {"startGame": _0_HangmanGame.Hangman._d_startGame, "getCurrentLife": _0_HangmanGame.Hangman._d_getCurrentLife, "letterGuess": _0_HangmanGame.Hangman._d_letterGuess, "newGame": _0_HangmanGame.Hangman._d_newGame, "endGame": _0_HangmanGame.Hangman._d_endGame, "checkKey": _0_HangmanGame.Hangman._d_checkKey}

Hangman._omni_skeleton = Hangman
_0_HangmanGame__POA.Hangman = Hangman
omniORB.registerSkeleton(Hangman._NP_RepositoryId, Hangman)
del Hangman
__name__ = "HangmanGame"

#
# End of module "HangmanGame"
#
__name__ = "Hangman_idl"

_exported_modules = ( "HangmanGame", )

# The end.
